<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2023/03/30/spring-mian-shi-bi-ji/"/>
      <url>/2023/03/30/spring-mian-shi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h1><h2 id="1-谈谈对SpringIoc的理解"><a href="#1-谈谈对SpringIoc的理解" class="headerlink" title="1.谈谈对SpringIoc的理解"></a>1.谈谈对SpringIoc的理解</h2><h3 id="1-1-控制反转来源"><a href="#1-1-控制反转来源" class="headerlink" title="1.1 控制反转来源"></a>1.1 控制反转来源</h3><p>-控制指的是对象创建（实例化，管理的权利）<br>-反转：指的是将控制权交给外部环境（Spring框架，Ioc容器）<br><img src="https://raw.githubusercontent.com/guduxingzheplus/blogPic/main/imgs/20230330101109.png" alt="20230330101109"></p><p>将对象之间的相互依赖关系交给IoC容器来管理，并由容器完成对象的注入，这样可以很大程度上简化应用的开发过程。<br>这样的好处是两方之间（调用方和被调用方）之间不再相互依赖</p><ul><li>降低对象之间的耦合度  </li><li>资源变得容易管理，比如用Spring容器提供的话，很容易实现一个单例。</li></ul><p><strong>IoC最常见的最合理的实践方式是依赖注入（DI）</strong></p><h3 id="1-2-DI"><a href="#1-2-DI" class="headerlink" title="1.2 DI"></a>1.2 DI</h3><p>DI即依赖注入：组件之间依赖关系由容器在运行时决定，形象的说，即由容器动态的将某个依赖注入到组件之中，依赖注入的目的并非为软件带来更多的功能，而是为了提升组件重用的频率，并未系统搭建一个灵活，可扩展的平台。</p><p>理解DI的关键是理解如下四个点：</p><ul><li>谁依赖谁 当然是程序依赖于IOC容器</li><li>为什么需要依赖：需要容器提供对象需要的外部资源</li><li>谁注入了谁： 很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象。</li><li>注入了什么：就是注入某个对象所需要的外部资源</li></ul><h4 id="1-2-1-对于IoC的理解"><a href="#1-2-1-对于IoC的理解" class="headerlink" title="1.2.1 对于IoC的理解"></a>1.2.1 对于IoC的理解</h4><p>Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</p><h4 id="1-2-2-对于DI的理解"><a href="#1-2-2-对于DI的理解" class="headerlink" title="1.2.2 对于DI的理解"></a>1.2.2 对于DI的理解</h4><p>IoC的一个重点是在运行的时候，动态的向某个对象提供他所需要的对象，这一点是通过DI来实现的。</p><p>比如A对象需要操作数据库，他会向spring报告这个需求，而spring会在合适的时候创建这个数据库驱动，具体怎么创建A不知道，创建完毕之后注入A中，这就是DI。DI通常通过使用反射实现，他允许程序在运行的时候动态的生成对象，执行对象的方法，改变对象的属性。</p><h3 id="1-3-什么是AOP"><a href="#1-3-什么是AOP" class="headerlink" title="1.3 什么是AOP"></a>1.3 什么是AOP</h3><p>传统的OPP编程是不能解决横切逻辑代码的，所谓横切逻辑代码指的是代码在多个纵向顺序流程中出现的相同子流程代码，我们称之为横切逻辑代码。</p><p>例如：现有三个类，Horse、Pig、Dog，这三个类中都有 eat 和 run 两个方法。</p><p>通过 OOP 思想中的继承，我们可以提取出一个 Animal 的父类，然后将 eat 和 run 方法放入父类中，Horse、Pig、Dog通过继承Animal类即可自动获得 eat() 和 run() 方法。这样将会少些很多重复的代码。</p><p><img src="https://raw.githubusercontent.com/guduxingzheplus/blogPic/main/imgs/20230330102109.png" alt="20230330102109"></p><p>OOP的代码如下：<br>‘’<br>public class Animal {</p><pre><code>/** 身高 */private String height;/** 体重 */private double weight;public void eat() &#123;    // 性能监控代码    long start = System.currentTimeMillis();    // 业务逻辑代码    System.out.println(&quot;I can eat...&quot;);    // 性能监控代码    System.out.println(&quot;执行时长：&quot; + (System.currentTimeMillis() - start)/1000f + &quot;s&quot;);&#125;public void run() &#123;    // 性能监控代码    long start = System.currentTimeMillis();    // 业务逻辑代码    System.out.println(&quot;I can run...&quot;);    // 性能监控代码    System.out.println(&quot;执行时长：&quot; + (System.currentTimeMillis() - start)/1000f + &quot;s&quot;);&#125;</code></pre><p>}<br>‘’</p><p><img src="https://raw.githubusercontent.com/guduxingzheplus/blogPic/main/imgs/20230330102246.png" alt="20230330102246"></p><p>横切代码存在的逻辑问题：</p><ul><li>代码重复</li><li>横切代码逻辑代码和业务代码混合在一起，代码臃肿，维护不方便</li></ul><p>AOP另辟蹊径，将横切代码抽离出来<br><img src="https://raw.githubusercontent.com/guduxingzheplus/blogPic/main/imgs/20230330102433.png" alt="20230330102433"><br>代码拆分容易，难的是如何在不改变原有业务逻辑的情况下，达到一致的效果。</p><p><strong>AOP 为什么较面向切片编程</strong><br>切：指的是横切逻辑，又有业务逻辑代码不懂，只能操作横切逻辑代码，所以面向横切逻辑</p><p>面：横切逻辑代码往往要影响很多个方法，每个方法如同一个点，多个点构成一个面。</p>]]></content>
      
      
      <categories>
          
          <category> spring面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/03/29/test/"/>
      <url>/2023/03/29/test/</url>
      
        <content type="html"><![CDATA[<p>大萨达</p><p><img src="https://raw.githubusercontent.com/guduxingzheplus/blogPic/main/imgs/dog-4988986__340.jpg" alt="dog-4988986__340"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/29/hello-world/"/>
      <url>/2023/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
